{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Wayne的博客"},{"location":"/index.html#wayne的博客","text":"","title":"Wayne的博客"},{"location":"/index.html#简介","text":"欢迎来到我的博客。本网站使用Lightbend Paradox构建，主要内容会与Scala技术栈相关。偶尔也会穿插一些琐话。欢迎关注。","title":"简介"},{"location":"/index.html#目录","text":"2018年8月 使用Paradox构建文档网站","title":"目录"},{"location":"/2018/index.html","text":"","title":"2018年8月"},{"location":"/2018/index.html#2018年8月","text":"使用Paradox构建文档网站 Lightbend Paradox简介 Sbt配置Paradox","title":"2018年8月"},{"location":"/2018/paradox_site_setup.html","text":"","title":"使用Paradox构建文档网站"},{"location":"/2018/paradox_site_setup.html#使用paradox构建文档网站","text":"","title":"使用Paradox构建文档网站"},{"location":"/2018/paradox_site_setup.html#lightbend-paradox简介","text":"Lightbend Paradox是为了软件项目而开发的Markdown文档工具。它提供了开箱即用的基本样式、完善的Github Flavor Markdown语法支持，并且可以通过指定的方法进行代码片段引入。结合sbt-site插件，可以非常轻松地做到在本地一键发布博客的过程，或者是通过Github的Travis CI在commit之后进行自动构建发布。对于Scala程序员来说，Paradox最大的好处在于可以使得代码和文档不被割裂。你的文档可以直接放在项目里面，然后通过特定语法将代码引入到文档中，从而使得文档内容可以在IDE里面随着代码变更直接变动，而不需要上下文切换到浏览器这个新环境中进行编写。\n上周我将Paradox引入了自己正在开发的项目里，并且第一次感受到了写文档的乐趣。之后便萌生想法，想要使用Paradox来构建自己的博客。当然，对于博客来说，这个组件并非最好的。但是用来做一些基本的思考记录还是足够的。Paradox最好的归宿是用来做文档网站，结合Github pages，可以轻松地做到版本相关的文档发布。目前基本上Lightbend除了基于Playframework构建的项目是使用早就存在的PlayDocPlugin之外，其他相关的项目都是尽量使用的Paradox来做文档管理，如Akka，Alpakka等，尤其是一些小项目。","title":"Lightbend Paradox简介"},{"location":"/2018/paradox_site_setup.html#sbt配置paradox","text":"","title":"Sbt配置Paradox"}]}