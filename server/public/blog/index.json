[{
    "fileName": "middlewareRace5th",
    "createdAt": "2019-05-31",
    "title": "第五届中间性能比赛初赛分析",
    "summary": "Better later than never. 一年一度的中间件性能大赛虽然比往年来的都迟了一些、奖金少了一些、决赛名额砍了一些，但是始终还是来了。虽然奖励大幅度下降，但是参加比赛获得的隐形福利仍然是不少的。在这里你可以见识到各路大牛，各种实现思路，并且真实模拟难得一见的双十一的洪峰场景。进入复赛前二十的选手还可以获得阿里中间件招聘优先推荐的名额；进入复赛前五名，还能领取阿里免费三日游的资格，可以参观阿里园区，可以在亲橙里的盒马鲜生吃上各种龙虾（波士顿龙虾、小龙虾、大螃蟹），还可以见到多隆、索尼等神级阿里大牛，甚至还有可能会获得他们的指导，以及一笔奖金。今年还有一个特别的地方是，中间件的内部赛和外部赛是同时举行的，所以在比赛的过程中你也能和阿里内部的选手同台PK，所以更能向阿里的大佬们展现你自己的能力了。\n"},
  {
    "fileName": "raft",
    "createdAt": "2019-05-04",
    "title": "Raft不是万能的",
    "summary": "我其实一直都没觉得Raft有什么特别的地方。它不过是《反应式设计模式》里面所讲的主动-被动模式的一种实现。因为其对强一致性的要求，所以在可用性上会有所牺牲；由于其只有主动节点处理请求的特性，所以在性能要求高的情况下会有所不足。但是不知道为什么现在市面上对Raft算法特别推崇，甚至有一种以为掌握了Raft就掌握了分布式系统的趋势。而这种观点并不可取。所以这一篇我们深入解析一下Raft算法，并希望借助此篇，能使大家拥有自行判断应该在何种情形下采用Raft算法的能力。"
  },
  {
    "fileName": "cqrs",
    "createdAt": "2019-04-09",
    "title": "CRUD写累了？试试CQRS吧！",
    "summary": "很多年以来，程序员的工作都充斥着大量的CRUD开发，我们要做的就是根据实体的变化去创建、查询、更新或者删除数据库中的记录而已。这些开发工作并不难，所以做多了以后，业务程序员可能会觉得枯燥、没意思。因为开发工作也许就是调调其他人的接口、提供一下自己的接口，然后顺便更新后面的库而已。\n\n但是实际上，我一直以来的观点是，只要在系统性能指标可以接受的范围内，快速支撑业务往往比精良的高性能系统更重要，除非你的当前CRUD系统无法支撑自己的海量业务和复杂需求。这个时候，就需要架构师来做一下架构升级，要么将后端的数据库引入主从提升性能，要么分库分表，要么引入复杂的分布式数据库，以继续提供ACID的支持。\n\n当然，还有另一种选项，就是CQRS。"
  },
  {
    "fileName": "cap",
    "createdAt": "2019-03-29",
    "title": "你真的懂CAP吗？",
    "summary": "想写这个是源于微信群里面的一个讨论。在讨论分布式系统的时候，有群友明确地如下说：\n\n> CAP是可以兼顾的啊！\n\n这把我惊起了一身冷汗，赶紧去查了一下是不是分布式系统理论界又有新的论文来推翻了之前的CAP定理了。后来深入讨论以后，才发现是他对CAP的理解有误。\n\nCAP理论是分布式领域的基础，所以大家的讨论和研究很多。学界和工业界也想出来好多办法来折中处理不可兼得时候的情形，例如著名的“BASE\"。但是诸如上面的“CAP可以兼顾”的话是绝对不应该出现的。如果能证明这点并且能写出学术文章的话，那是肯定能发 PODC 并且成为学术大牛的。而现阶段的研究没有一个往着打破CAP定理的方向走，这说明CAP定理挺牢固的，只是因为“BASE”的存在而产生好像兼顾了的误解。那么，为了帮助大家更好的理解CAP及其应用呢，借此机会，我来试着写篇文章讨论一下这方面的内容，并且争取能通过实践将其表达的更加清楚。"
  },
  {
    "fileName": "polarDB",
    "createdAt": "2019-02-01",
    "title": "第一届阿里云PolarDB数据库性能大赛\"RDP飞起来\"队伍攻略总结",
    "summary": "持续好几个月的第一届阿里云PolarDB性能挑战赛终于圆满结束了。我所在的“RDP飞起来”团队获得了初赛第三、复赛第六的名次，最终拿到了赛事的季军。在参加比赛的这段时间内，我学到了很多东西，认识了很多人，也有幸去北京阿里中心转了一圈，聆听各位大佬教导，受益匪浅。为了让其他同样对阿里比赛有兴趣的朋友可以有同样的机会，这里将我这段时间的比赛心得做一个分享，希望能对后续想参加比赛的人有所帮助。"
  },
  {
    "fileName": "jmh",
    "createdAt": "2018-11-03",
    "title": "应用JMH测试大型HashMap的性能",
    "summary": "写这篇是因为PolarDB比赛很重要的一点是控制内存。C++只有2G，Java也只有3G，而6400W的键值对，即使只是`Long`类型，也需要`16 * 64 * 10e6 ≈ 1G`的内存，这还不包括其他对象引用的相关开销，所以内存控制在这里是非常重要的，因为稍不小心就会被CGroup无情地kill掉。因此在比赛开始没多久的时候我就研究了一下使用怎样的HashMap可以达到内存最简的状况。在这个过程中，顺便使用了JMH来分析了一下几个侯选库的性能。因为初赛相对来说比较简单，而且HashMap实际上在复赛时候的Range操作上没有发挥余地，所以我决定将这篇写下来分享给大家，希望能帮助更多对比赛有兴趣的同学找到一个比较好的入手点。\n\n之前的初赛简单思路可以看这里。"
  },
  {
    "fileName": "middleware_race_preliminary",
    "createdAt": "2018-10-06",
    "title": "第四届阿里中间件性能大赛初赛RDP飞起来团队总结",
    "summary": "国庆刚刚好在弄阿里云组织的第一届POLARDB数据库性能大赛，忽然想起来可以把我之前写的阿里中间件比赛的总结发到博客里面。这一篇已经被几个公众号发过了，包括阿里中间件官方号。内容主要是如何使用akka来构建一个高性能的适配Dubbo的Service Mesh Sidecar。当然我的分数主要是通过Netty拿的。但是其实Netty只是胜在可以Zero Copy这一点上，贴近底层，没有什么意思。Akka构建Agent才包含更多的反应式思想。"
  },
  {
    "fileName": "pricinpleOfReactiveStream",
    "createdAt": "2018-10-02",
    "title": "反应式流回压的原理",
    "summary": "反应式编程模型是目前编程世界的大势所趋。Java服务框架中的扛把子Spring会在5.0中全面拥抱反应式编程模型，这意味着广大的Java程序员都开始有可能接触反应式编程的思想，除非他们的项目永远被三体人锁死在了Spring 4。新版本的Spring全面拥抱了反应式宣言(该宣言中文版由何品主要翻译，我和Hawstein、CTAO、Neo一起校审，并作为附录存于《反应式设计模式》一书中。书作者Roland Kuhn是最早的起草人之一)中的思想，并且提供从Threaded Server转向Event-based Server的途径，并且反应式流会在框架中大量应用。很多人也许很早就听说过Rx Extensions，知道Rx .Net, RxJs, RxJava，RxScala，但是大部分也许对其中的模式和原理不太了然。为什么加个Rx就比我们平时用的集合框架高级了呢？反应式流的什么特性令其独树一帜了？这一篇里面，我们来揭示一下反应式流的原理。"
  },
  {
    "fileName": "workingWithGit",
    "createdAt": "2018-09-29",
    "title": "使用Git的一些原则",
    "summary": "这个指南是用来协助开发人员来约定如何使用Git的。 里面提到的一些内容是我们觉得会有助于开发人员更好地协作的。 但是这些约定并不是强制的，你应该使用最适合你的方式。"
  }
]
